#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdlib>   // for rand(), srand()
#include <ctime>     // for time()
#include <vector> 

using namespace std;

/*
  calculateMonthlyMortgage:
    Computes the fixed monthly mortgage payment for a fully amortized loan.
    principal: the loan amount (home price – down payment)
    annualInterestRate: in decimal form (e.g., 0.05 for 5%)
    totalMonths: number of monthly payments (e.g., 30 years × 12 = 360)
*/
double calculateMonthlyMortgage(double principal, double annualInterestRate, int totalMonths) {
    double monthlyRate = annualInterestRate / 12.0;
    double numerator   = principal * monthlyRate * pow(1 + monthlyRate, totalMonths);
    double denominator = pow(1 + monthlyRate, totalMonths) - 1.0;
    return numerator / denominator;
}

/*
  getRandomFluctuation:
    Returns a small random fluctuation between -maxFluctuation and +maxFluctuation.
    maxFluctuation is given in decimal form (e.g., 0.002 for ±0.2%).
    This simulates mild market randomness.
*/
double getRandomFluctuation(double maxFluctuation) {
    double r = static_cast<double>(rand()) / RAND_MAX;
    return (r * 2.0 * maxFluctuation) - maxFluctuation;
}

int main() {
    // Seed the random number generator
    srand(static_cast<unsigned int>(time(nullptr)));

    cout << fixed << setprecision(2);
    cout << "=== Housing Simulation (Home Purchase vs. Rent + ETF) ===\n\n";

    // 1) First, ask which path the user wants.
    cout << "Choose simulation path:\n";
    cout << "  1) Buy a home with mortgage\n";
    cout << "  2) Rent and invest in ETF\n";
    cout << "Enter 1 or 2: ";
    int choice;
    cin >> choice;
    cout << "\n";

    // We will need a few common inputs in both paths, so declare them here:
    double annualPreTaxIncome = 0.0;
    double homePurchasePrice  = 0.0;
    double downPaymentRatio   = 0.0; // e.g. 0.20 for 20%

    // Variables specific to “Buy a home”:
    double mortgageAnnualInterest = 0.0;
    int    loanTermYears          = 0;
    double propertyTaxRate        = 0.0;
    double annualHOACost          = 0.0;
    double purchaseTaxRate        = 0.0;
    double saleTaxRate            = 0.0;
    double homeAnnualAppreciation = 0.0;

    // Variables specific to “Rent + ETF”:
    double startingMonthlyRent   = 0.0;
    double annualRentInflation   = 0.0;
    double etfAnnualReturn       = 0.0;
    double monthlyInvestmentRent = 0.0;

    // The simulation will always run up to 30 years (360 months):
    const int simulationYears = 30;
    const int totalMonths     = simulationYears * 12;
    vector<double> annualNetWorth(simulationYears, 0.0);

    if (choice == 1) {
        // ========== BUY A HOME PATH ==========
        cout << ">>> You chose to BUY A HOME. Please enter these details:\n\n";

        // 1.A) Income
        cout << "1) Enter your annual pre-tax income (e.g., 90000): $";
        cin >> annualPreTaxIncome;

        // 1.B) Home purchase & down payment
        cout << "2) Enter the home purchase price (e.g., 600000): $";
        cin >> homePurchasePrice;

        cout << "3) Enter down payment ratio (e.g., 20 for 20%): ";
        cin >> downPaymentRatio;
        downPaymentRatio /= 100.0; // convert to decimal

        // 1.C) Mortgage details
        cout << "4) Enter loan term in years (e.g., 30): ";
        cin >> loanTermYears;

        cout << "5) Enter mortgage annual interest rate (e.g., 5 for 5%): ";
        cin >> mortgageAnnualInterest;
        mortgageAnnualInterest /= 100.0; // decimal

        // 1.D) Property tax & HOA
        cout << "6) Enter property tax rate (e.g., 1.2 for 1.2%): ";
        cin >> propertyTaxRate;
        propertyTaxRate /= 100.0;

        cout << "7) Enter annual HOA cost (e.g., 3000): $";
        cin >> annualHOACost;

        // 1.E) One-time purchase tax & sale tax (for eventual resale)
        cout << "8) Enter one-time purchase tax rate (e.g., 1.5 for 1.5%): ";
        cin >> purchaseTaxRate;
        purchaseTaxRate /= 100.0;

        cout << "9) Enter property sale tax rate (e.g., 9 for 9%): ";
        cin >> saleTaxRate;
        saleTaxRate /= 100.0;

        // 1.F) Annual appreciation of the home
        cout << "10) Enter home annual appreciation rate (e.g., 4 for 4%): ";
        cin >> homeAnnualAppreciation;
        homeAnnualAppreciation /= 100.0;

        cout << "\n";

        // ==== Now that we have ALL inputs for the “buy” path, we can set up the simulation ====

        // 2) Derived values
        double downPaymentAmount   = homePurchasePrice * downPaymentRatio;
        double loanPrincipal       = homePurchasePrice - downPaymentAmount;
        int    totalMortgageMonths = loanTermYears * 12;

        // Use our helper function to compute the fixed monthly mortgage payment
        double monthlyMortgagePayment = calculateMonthlyMortgage(
            loanPrincipal,
            mortgageAnnualInterest,
            totalMortgageMonths
        );

        // Convert property tax & HOA into monthly amounts
        double monthlyPropertyTax = (homePurchasePrice * propertyTaxRate) / 12.0;
        double monthlyHOA        = annualHOACost / 12.0;

        // One-time purchase tax is paid immediately (month 0) out of pocket
        double oneTimePurchaseTax = homePurchasePrice * purchaseTaxRate;

        // 3) Initialize state
        double bankBalance      = 0.0;              // we assume down payment + purchase tax is already paid
        double mortgageBalance  = loanPrincipal;    // start owing the entire loan
        double homeValue        = homePurchasePrice; // initial market value of the home

        double monthlyIncome = annualPreTaxIncome / 12.0;

        cout << "Simulating “BUY A HOME” for " << simulationYears
             << " years (" << totalMonths << " months)...\n\n";

        // 4) Month-by-month loop
        for (int month = 1; month <= totalMonths; ++month) {
            int yearIndex  = (month - 1) / 12;            // 0-based year index
            int monthOfYear = ((month - 1) % 12) + 1;     // 1..12

            // 4.A) Receive monthly income
            bankBalance += monthlyIncome;

            // 4.B) Pay mortgage (principal + interest)
            if (mortgageBalance > 0.0) {
                double monthlyInterest = mortgageBalance * (mortgageAnnualInterest / 12.0);
                double principalPaid   = monthlyMortgagePayment - monthlyInterest;
                if (principalPaid < 0.0) principalPaid = 0.0;

                // If we are on the very last payment, avoid negative balance
                if (principalPaid > mortgageBalance) {
                    principalPaid = mortgageBalance;
                    // Recalculate payment so that mortgageBalance goes exactly to zero
                    monthlyMortgagePayment = principalPaid + monthlyInterest;
                }

                mortgageBalance -= principalPaid;
                bankBalance     -= monthlyMortgagePayment;
            }

            // 4.C) Pay monthly property tax & HOA
            bankBalance -= monthlyPropertyTax;
            bankBalance -= monthlyHOA;

            // 4.D) Update home value with base appreciation + small random fluctuation
            double baseMonthlyApp = homeAnnualAppreciation / 12.0;
            double fluctuation    = getRandomFluctuation(0.002); // ±0.2%
            homeValue *= (1.0 + baseMonthlyApp + fluctuation);

            // 4.E) Compute net worth: homeValue – mortgageBalance + bankBalance
            double netWorth = homeValue - mortgageBalance + bankBalance;

            // 4.F) If it’s December, store that year’s net worth
            if (monthOfYear == 12) {
                annualNetWorth[yearIndex] = netWorth;
            }

            // 4.G) Print a monthly report
            cout << "Month " << month << " (Year " << (yearIndex + 1)
                 << ", Month " << monthOfYear << ")\n";
            cout << "  Bank Balance:       $" << bankBalance << "\n";
            cout << "  Home Value:         $" << homeValue << "\n";
            cout << "  Mortgage Balance:   $" << mortgageBalance << "\n";
            cout << "  Net Worth:          $" << netWorth << "\n\n";

            // 4.H) If at any point bankBalance < 0 while mortgage is not fully paid, end early
            if (bankBalance < 0.0 && mortgageBalance > 0.0) {
                cout << "  *** Bank balance dropped below zero. Simulation ends early. ***\n\n";
                break;
            }
        }

        // 5) After the loop: print annual summary for all 30 years
        cout << "=== Annual Net Worth Summary (Home Purchase) ===\n";
        for (int y = 0; y < simulationYears; ++y) {
            cout << " Year " << setw(2) << (y + 1) << ": $"
                 << annualNetWorth[y] << "\n";
        }
        cout << "\n";

        // 6) ASCII Graph of Net Worth over 30 Years
        //    We scale each year's net worth relative to the maximum net worth
        double maxNetWorth = 0.0;
        for (int y = 0; y < simulationYears; ++y) {
            if (annualNetWorth[y] > maxNetWorth) {
                maxNetWorth = annualNetWorth[y];
            }
        }

        if (maxNetWorth > 0.0) {
            cout << "=== ASCII Net Worth Graph (Home Purchase) ===\n";
            // We choose a maximum bar width of 50 characters
            const int maxBarWidth = 50;

            for (int y = 0; y < simulationYears; ++y) {
                double value = annualNetWorth[y];
                // Scale to [0, maxBarWidth]
                int barLength = static_cast<int>((value / maxNetWorth) * maxBarWidth);

                // Print year label
                cout << " Year " << setw(2) << (y + 1) << " | $"
                     << setw(10) << annualNetWorth[y] << " | ";

                // Print bar of asterisks
                for (int i = 0; i < barLength; ++i) {
                    cout << '*';
                }
                cout << "\n";
            }
            cout << "\n";
        } else {
            cout << "No net worth data to graph.\n\n";
        }

        cout << "Simulation complete.\n";

    }
    else if (choice == 2) {
        // ========== RENT + ETF PATH ==========
        cout << ">>> You chose to RENT & INVEST IN ETF. Please enter these details:\n\n";

        // 2.A) Income
        cout << "1) Enter your annual pre-tax income (e.g., 90000): $";
        cin >> annualPreTaxIncome;

        // 2.B) We still ask for “home purchase price” and “down payment ratio”
        //      because we will treat that amount as “saved” into the bank at month 0
        //      (this is the money you DIDN’T spend on a down payment).
        cout << "2) Enter the home purchase price (e.g., 600000): $";
        cin >> homePurchasePrice;

        cout << "3) Enter down payment ratio (e.g., 20 for 20%): ";
        cin >> downPaymentRatio;
        downPaymentRatio /= 100.0; // convert to decimal

        // 2.C) Rent & ETF details
        cout << "4) Enter starting monthly rent (e.g., 2000): $";
        cin >> startingMonthlyRent;

        cout << "5) Enter annual rent inflation (e.g., 2 for 2%): ";
        cin >> annualRentInflation;
        annualRentInflation /= 100.0;

        cout << "6) Enter ETF annual return rate (e.g., 7 for 7%): ";
        cin >> etfAnnualReturn;
        etfAnnualReturn /= 100.0;

        cout << "7) Enter how much you will invest monthly into ETF: $";
        cin >> monthlyInvestmentRent;

        cout << "\n";

        // ==== Now that we have ALL inputs for the “rent” path, set up the simulation ====

        // 3) Derived values
        double downPaymentAmount = homePurchasePrice * downPaymentRatio;

        // 4) Initialize state
        double bankBalance    = downPaymentAmount; // you “save” your would-be down payment
        double etfBalance     = 0.0;
        double currentRent    = startingMonthlyRent;
        double monthlyIncome  = annualPreTaxIncome / 12.0;

        cout << "Simulating “RENT + ETF” for " << simulationYears
             << " years (" << totalMonths << " months)...\n\n";

        // 5) Month-by-month loop
        for (int month = 1; month <= totalMonths; ++month) {
            int yearIndex   = (month - 1) / 12;
            int monthOfYear = ((month - 1) % 12) + 1;

            // 5.A) Receive monthly income
            bankBalance += monthlyIncome;

            // 5.B) Pay this month’s rent
            bankBalance -= currentRent;

            // 5.C) Invest a fixed amount into ETF (or whatever is left if you don’t have enough)
            if (bankBalance >= monthlyInvestmentRent) {
                bankBalance   -= monthlyInvestmentRent;
                etfBalance    += monthlyInvestmentRent;
            } else {
                etfBalance += bankBalance;
                bankBalance = 0.0;
            }

            // 5.D) Update ETF with monthly return + random fluctuation
            double baseMonthlyETF = etfAnnualReturn / 12.0;
            double fluctuationETF = getRandomFluctuation(0.003); // ±0.3%
            etfBalance *= (1.0 + baseMonthlyETF + fluctuationETF);

            // 5.E) If it’s the start of a new year (January) and not month=1, raise rent
            if (monthOfYear == 1 && month != 1) {
                currentRent *= (1.0 + annualRentInflation);
            }

            // 5.F) Compute net worth = bankBalance + etfBalance
            double netWorth = bankBalance + etfBalance;

            // 5.G) If December, store annual net worth
            if (monthOfYear == 12) {
                annualNetWorth[yearIndex] = netWorth;
            }

            // 5.H) Print a monthly report
            cout << "Month " << month << " (Year " << (yearIndex + 1)
                 << ", Month " << monthOfYear << ")\n";
            cout << "  Bank Balance:       $" << bankBalance << "\n";
            cout << "  ETF Balance:        $" << etfBalance << "\n";
            cout << "  Current Rent:       $" << currentRent << "\n";
            cout << "  Net Worth:          $" << netWorth << "\n\n";

            // 5.I) If bankBalance < 0, end simulation early
            if (bankBalance < 0.0) {
                cout << "  *** Bank balance dropped below zero. Simulation ends early. ***\n\n";
                break;
            }
        }

        // 6) After the loop: print annual summary
        cout << "=== Annual Net Worth Summary (Rent + ETF) ===\n";
        for (int y = 0; y < simulationYears; ++y) {
            cout << " Year " << setw(2) << (y + 1) << ": $"
                 << annualNetWorth[y] << "\n";
        }
        cout << "\n";

        // 7) ASCII Graph of Net Worth over 30 Years
        double maxNetWorth = 0.0;
        for (int y = 0; y < simulationYears; ++y) {
            if (annualNetWorth[y] > maxNetWorth) {
                maxNetWorth = annualNetWorth[y];
            }
        }

        if (maxNetWorth > 0.0) {
            cout << "=== ASCII Net Worth Graph (Rent + ETF) ===\n";
            const int maxBarWidth = 50;

            for (int y = 0; y < simulationYears; ++y) {
                double value = annualNetWorth[y];
                int barLength = static_cast<int>((value / maxNetWorth) * maxBarWidth);

                cout << " Year " << setw(2) << (y + 1) << " | $"
                     << setw(10) << annualNetWorth[y] << " | ";
                for (int i = 0; i < barLength; ++i) {
                    cout << '*';
                }
                cout << "\n";
            }
            cout << "\n";
        } else {
            cout << "No net worth data to graph.\n\n";
        }

        cout << "Simulation complete.\n";

    }
    else {
        // If the user enters anything other than 1 or 2
        cout << "Invalid choice. Please run the program again and enter 1 or 2.\n";
    }

    return 0;
}
